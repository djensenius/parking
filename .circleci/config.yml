# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.4.1-node-browsers
         environment:
           - MYSQL_USER=ubuntu
           - MYSQL_USERNAME=ubuntu
           - MYSQL_PASSWORD=ubuntu
           - MYSQL_HOST=127.0.0.1
           - RAILS_ENV=test
       - image: circleci/mysql:5.7-ram
         environment:
           - MYSQL_USER=ubuntu
           - MYSQL_ROOT_PASSWORD=ubuntu
           - MYSQL_DATABASE=circle_test
           - MYSQL_USERNAME=ubuntu
           - MYSQL_PASSWORD=ubuntu
           - MYSQL_HOST=127.0.0.1
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - gem-cache-{{ arch }}-{{ checksum "Gemfile.lock" }}
          # - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          # - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            sudo apt-get install cmake python-pip yamllint python3-pkg-resources
            yarn
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          key: gem-cache-{{ arch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
            - ~/.cache/yarn

      # Database setup
      - run:
          name: Load DB
          command: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: Rubocop
          command: |
            mkdir /tmp/test-results
            bundle exec rubocop

      - run:
          name: Rake test
          command: bundle exec rake test

      - run:
          name: YAML lint
          command: yamllint config/locales/

      - run:
          name: Yarn lint
          command: yarn lint

      - run:
          name: Stylelint
          command: yarn stylelint

      - run:
          name: Yart test && CodeCov
          command: yarn test && yarn run codecov

      # collect reports
      - store_test_results:
          path: /tmp/test-results

      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          name: Post (pronto)
          command: 'if [ -n "${CI_PULL_REQUEST}" ]; then bundle exec pronto run -f github_pr -c origin/master; fi'
